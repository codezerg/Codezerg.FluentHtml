# Codezerg.FluentHtml

> A fluent HTML DSL/view engine for C# that enables type-safe HTML generation with a clean, composable API. Features a uniform factory pattern with parameterless tag methods and lowercase fluent attribute chaining.

## Overview

Codezerg.FluentHtml is a .NET Standard 2.0 library that provides a strongly-typed, fluent interface for generating HTML in C#. It eliminates string concatenation and template syntax in favor of a pure C# approach with compile-time safety and IntelliSense support.

## Key Features

- **Complete HTML5 Support**: All HTML5 elements with appropriate attributes
- **XSS Protection**: Automatic HTML encoding of text content
- **htmx Integration**: Built-in support for htmx attributes (hx_get, hx_post, hx_target, etc.)
- **Component System**: Pre-built components and easy custom component creation
- **Conditional Rendering**: Built-in @if and @foreach helpers
- **No Dependencies**: Pure .NET Standard 2.0 library

## Core Concepts

The library follows three fundamental principles:

1. **Uniform Factory Pattern**: All HTML elements are created through static factory methods in the `Html` class. Void elements (img, input, br, etc.) are always parameterless, while container elements accept children via params arrays.

2. **Lowercase Fluent API**: All HTML attributes are set through lowercase extension methods that return the element for method chaining. C# keywords are prefixed with @ (e.g., @class, @for).

3. **Type Safety**: Each HTML element has its own strongly-typed class with element-specific attributes, preventing invalid attribute usage at compile time.

## Basic Usage

```csharp
using Codezerg.FluentHtml;

// Create HTML structure
var page = Html.html(
    Html.head(
        Html.meta().charset("utf-8"),
        Html.title(Html.text("My Page"))
    ),
    Html.body(
        Html.h1(Html.text("Welcome")).@class("title"),
        Html.p(Html.text("Hello, World!")).id("intro")
    )
);

// Render to string
string html = Renderer.Render(page);
```

## API Patterns

### Void Elements (Self-Closing)
```csharp
Html.meta()          // <meta>
Html.link()          // <link>
Html.img()           // <img>
Html.input()         // <input>
Html.br()            // <br>
Html.hr()            // <hr>
```

### Container Elements
```csharp
Html.div(/* children */)     // <div>...</div>
Html.p(/* children */)       // <p>...</p>
Html.section(/* children */) // <section>...</section>
```

### Attribute Chaining
```csharp
Html.input()
    .type("email")
    .name("email")
    .placeholder("your@email.com")
    .required()
```

### Text Content
```csharp
Html.text("Content")  // HTML-encoded text node
```

## Usage Examples

### Basic HTML Generation
```csharp
var html = Html.div(
    Html.h1(Html.text("Hello World")).@class("title"),
    Html.p(Html.text("Welcome to FluentHtml")).id("intro")
).@class("container");
```

### Form with htmx
```csharp
var form = Html.form(
    Html.input().type("text").name("username").placeholder("Username"),
    Html.button(Html.text("Submit")).type("submit")
)
.hx_post("/api/login")
.hx_target("#result")
.hx_swap(HxSwap.innerHTML);
```

### Component Example
```csharp
public static Element Card(string title, string content)
{
    return Html.div(
        Html.h3(Html.text(title)).@class("card-title"),
        Html.p(Html.text(content)).@class("card-body")
    ).@class("card");
}

// Usage
var card = Card("Feature", "Description of the feature");
```

### htmx Integration
```csharp
Html.button(Html.text("Load More"))
    .hx_get("/api/items")
    .hx_target("#results")
    .hx_swap(HxSwap.beforeend)
    .hx_trigger(HxTrigger.click)
```

### Conditional Rendering
```csharp
Html.@if(isLoggedIn,
    () => Html.p(Html.text($"Welcome, {username}!")),
    () => Html.a(Html.text("Please log in")).href("/login")
)

Html.ul(
    Html.@foreach(items, item => 
        Html.li(Html.text(item.Name))
    )
)
```

## Architecture

### Node Hierarchy
- `Node` (abstract base) - Base class for all renderable elements
  - `Element` - Represents HTML elements with tag name, attributes, and children
  - `TextNode` - Represents text content with automatic HTML encoding

### Entry Points
- `Html` class - Static factory methods for creating all HTML elements
- `Renderer` class - Methods for rendering nodes to HTML strings
  - `Render(Node node)` - Renders a node tree to HTML string
  - `RenderElement(Element element)` - Internal element rendering
- `Components` class - Pre-built reusable UI components

### HTML Elements
Located in `src/Codezerg.FluentHtml/Elements/`

**Document Structure:**
- `HTMLHtmlElement` - Root HTML element
- `HTMLMetaElement`, `HTMLLinkElement`, `HTMLScriptElement` - Head elements

**Forms & Input:**
- `HTMLFormElement`, `HTMLInputElement`, `HTMLSelectElement`, `HTMLTextAreaElement`
- `HTMLButtonElement`, `HTMLLabelElement`, `HTMLOptionElement`
- `HTMLFieldSetElement`, `HTMLLegendElement`

**Media Elements:**
- `HTMLAudioElement`, `HTMLVideoElement`, `HTMLSourceElement`, `HTMLTrackElement`
- `HTMLImageElement`, `HTMLIFrameElement`, `HTMLEmbedElement`
- `HTMLObjectElement`, `HTMLParamElement`

**Table Elements:**
- `HTMLTableElement`, `HTMLTableSectionElement`, `HTMLTableRowElement`
- `HTMLTableCellElement`, `HTMLTableCaptionElement`
- `HTMLTableColElement`, `HTMLTableColGroupElement`

**Semantic Elements:**
- `HTMLSectionElement`, `HTMLArticleElement`, `HTMLNavElement`
- `HTMLAsideElement`, `HTMLHeaderElement`, `HTMLFooterElement`
- `HTMLAddressElement`, `HTMLFigureElement`, `HTMLFigCaptionElement`

**Text Formatting:**
- `HTMLHeadingElement` (h1-h6), `HTMLParagraphElement`
- `HTMLDivElement`, `HTMLSpanElement`, `HTMLPreElement`
- `HTMLBlockQuoteElement`, `HTMLStrongElement`, `HTMLEmElement`
- `HTMLSmallElement`, `HTMLMarkElement`, `HTMLDelElement`, `HTMLInsElement`
- `HTMLSubElement`, `HTMLSupElement`, `HTMLCodeElement`
- `HTMLKbdElement`, `HTMLSampElement`, `HTMLVarElement`

**Interactive Elements:**
- `HTMLDetailsElement`, `HTMLDialogElement`
- `HTMLProgressElement`, `HTMLMeterElement`
- `HTMLTimeElement`, `HTMLDataElement`

### Extension System
Located in `src/Codezerg.FluentHtml/Extensions/`

**GlobalAttributeExtensions** - Universal HTML attributes and utilities
- Core attributes: `id`, `@class`, `style`, `title`, `lang`, `dir`
- Accessibility: `role`, `arialabel`, `ariadescribedby`, `ariahidden`
- Data attributes: `data(name, value)`
- Events: `onclick`, `onchange`, `onsubmit`, `onfocus`, `onblur`
- Boolean attributes: `hidden`, `contenteditable`, `draggable`, `spellcheck`
- Utility methods: `attr`, `addChild`, `addChildren`

**HtmxExtensions** - htmx integration
- CRUD: `hx_get`, `hx_post`, `hx_put`, `hx_delete`
- Targeting: `hx_target`, `hx_swap` (with HxSwap enum)
- Triggers: `hx_trigger` (with HxTrigger enum)
- Features: `hx_confirm`, `hx_boost`, `hx_push_url`, `hx_vals`, `hx_indicator`

### Component System
Pre-built reusable UI components in `Components` class:
- Layout: `MyLayout`, `MyHeader`, `MyFooter`
- UI Elements: `Card`, `Alert`, `NavigationMenu`
- Forms: `FormGroup`

## Design Patterns

1. **Uniform Factory Pattern**: All HTML tag creation methods follow consistent patterns:
   - Void elements (img, input, meta, br, hr, etc.) are always parameterless
   - Container elements accept `params Node[]` for children
   - All factory methods in `Html` class are static

2. **Fluent Extension Methods**: 
   - All attributes are lowercase extension methods that return the element for chaining
   - Method names match HTML attribute names (with @ prefix for C# keywords)
   - Consistent return type `T where T : Element` for all extensions

3. **Type Safety**: 
   - Each HTML element has its own strongly-typed class
   - Element-specific attributes are defined as extension methods on the appropriate type
   - Compile-time checking prevents invalid attribute usage

4. **Component Composition**:
   - Components are static methods returning `Element` or `Node`
   - Components can nest other components for complex UI structures
   - Parameters allow customization while maintaining consistency

## Implementation Details

- **XSS Protection**: TextNode automatically HTML-encodes content using `System.Net.WebUtility.HtmlEncode`
- **Void Elements**: Defined in `Element.cs` as a static HashSet (area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr)
- **C# Keywords**: Use @ prefix for reserved words (e.g., `@class`, `@base`, `@if`, `@foreach`, `@for`)
- **Target Framework**: Library targets .NET Standard 2.0 for broad compatibility
- **Test Framework**: Tests run on .NET 6.0 using xUnit
- **Demo Project**: Located in `demo/Codezerg.FluentHtml.Demo/`, demonstrates usage patterns

## Testing

Key test areas covered:
- HTML encoding for XSS protection
- Self-closing/void tag rendering
- Nested structure rendering
- Attribute handling and escaping
- Component composition
- htmx attribute generation